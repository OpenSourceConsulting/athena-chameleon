//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.09.04 at 12:32:21 오후 KST 
//


package com.athena.chameleon.engine.entity.xml.jeusejbdd.v5_0;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for subengine-typeType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="subengine-typeType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token">
 *     &lt;enumeration value="ReadLocking"/>
 *     &lt;enumeration value="WriteLocking"/>
 *     &lt;enumeration value="WriteLockingFind"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "subengine-typeType")
@XmlEnum
public enum SubengineTypeType {


    /**
     * 
     *                     [Description]: 생성된 ejbLoad()는 데이터베이스 테이블의 열에 대해서 항상 "shared lock"을 가진다.
     *                     
     * 
     */
    @XmlEnumValue("ReadLocking")
    READ_LOCKING("ReadLocking"),

    /**
     * 
     *                     [Description]: 생성된 ejbLoad()는 데이터베이스 테이블의 열에 대해서 항상 "exclusive lock"을 가진다.
     *                     
     * 
     */
    @XmlEnumValue("WriteLocking")
    WRITE_LOCKING("WriteLocking"),

    /**
     * 
     *                     [Description]: 생성된 ejbLoad()와 ejbFind() 는 데이터베이스 테이블의 열에 대해서 항상 "exclusive lock"을 가진다.
     *                     
     * 
     */
    @XmlEnumValue("WriteLockingFind")
    WRITE_LOCKING_FIND("WriteLockingFind");
    private final String value;

    SubengineTypeType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static SubengineTypeType fromValue(String v) {
        for (SubengineTypeType c: SubengineTypeType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
