<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter>
<chapter title="디플로이 애플리케이션 개요">
	<deploy_application_text/>
	<section title ="애플리케이션 유형 개요">
		<text>입력된 애플리케이션은 <deploy_type/> 형태입니다. 애플리케이션의 유형에는 EAR, WAR, JAR 등이 있으며 각 애플리케이션에 대한 요약 설명은 다음과 같습니다.</text>
		<section title="JAR 파일">
			<text>자바에서 배포의 단위는 JAR 파일입니다. 물론 .class 파일 하나에 main() 메소드를 두고 실행할 수 있도록 하면 그것도 하나의 애플리케이션이 될 수 있습니다. 그런데 일반적으로 애플리케이션은 여러 개의 클래스파일을 사용하며, JVM에서는 클래스 로더 라는 객체를 사용해서 그 애플리케이션에서 사용할 수 있는 클래스들의 네임스페이스 역할을 하도록 합니다.
				
				JAR 아카이브를 사용하지 않고 자바 애플리케이션을 실행하려면 java 명령어의 옵션으로 CLASSPATH를 일일히 지정해 주어야 합니다. 그러면 클래스 로더는 해당 애플리케이션을 수행하는 데 필요한 클래스들을 CLASSPATH 옵션에 주어진 경로에서 로딩합니다.
				
				그런데, JAR 아카이브는 애플리케이션 수행시 필요한 클래스들을 물리적으로 묶어주는 단위체로서의 역할을 합니다. 즉 JAR 아카이브를 사용하면 지저분하게 CLASSPATH를 지정해줄 필요 없이 어떤 애플리케이션에서 필요한 클래스들의 네임스페이스를 제공할 수 있게 됩니다.
				
				JAR 아카이브는 반드시 main() 메소드를 가지는 클래스가 있어서 단독적으로 수행할 수 있게 할 필요는 없습니다. JAR 아카이브는 단순히 다른 JAR 아카이브의 라이브러리 역할을 하기도 합니다.
			</text>
		</section>
		<section title="WAR 파일">
			<text>톰캣을 사용할 때와 같이 WAR 아카이브를 그 자체로 독립적인 애플리케이션으로 개발한 경우, WAR 파일 단위로 서버에 배치가 됩니다. 이 경우 이 WAR 아카이브를 웹 애플리케이션이라고 합니다.</text>
		</section>
		<section title="EAR 파일">
			<text>EAR은 Jave EE 5 스펙의 최상위 애플리케이션 단위입니다. EAR은 하나 이상의 JAR, WAR, RAR 아카이브들을 가질 수 있으며, 사실 이러한 모듈들을 하나로 묶어 준 아카이브에 불과합니다. 실제로 WAS에 배치될 때, 각 모듈들은 흩어져 제각기 자신이 있어야 할 Tier의 컨테이너 안으로 탑재됩니다. 그래서 Java EE 5의 애플리케이션 모델을 분산형 다층 애플리케이션(Distributed Multitier Application) 이라고 하는 것입니다.</text>
		</section>
	</section>
</chapter>
